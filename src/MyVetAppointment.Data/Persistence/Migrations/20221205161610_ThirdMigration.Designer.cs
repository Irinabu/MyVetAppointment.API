// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyVetAppointment.Data.Persistence;

#nullable disable

namespace MyVetAppointment.Data.Persistence.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20221205161610_ThirdMigration")]
    partial class ThirdMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyVetAppointment.Data.Entities.Animal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AnimalType")
                        .HasColumnType("int");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Animals");
                });

            modelBuilder.Entity("MyVetAppointment.Data.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AppointmentStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VetDoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("VetDoctorId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("MyVetAppointment.Data.Entities.Bill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Diagnose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("MyVetAppointment.Data.Entities.CustomerVetDoctor", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VetDoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CustomerId", "VetDoctorId");

                    b.HasIndex("VetDoctorId");

                    b.ToTable("CustomerVetDoctors");
                });

            modelBuilder.Entity("MyVetAppointment.Data.Entities.Drug", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalQuantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("MyVetAppointment.Data.Entities.PrescriptionDrug", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrugId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("QuantityPerDay")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("DrugId");

                    b.ToTable("PrescriptionDrug");
                });

            modelBuilder.Entity("MyVetAppointment.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MyVetAppointment.Data.Entities.Customer", b =>
                {
                    b.HasBaseType("MyVetAppointment.Data.Entities.User");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("MyVetAppointment.Data.Entities.VetDoctor", b =>
                {
                    b.HasBaseType("MyVetAppointment.Data.Entities.User");

                    b.HasDiscriminator().HasValue("VetDoctor");
                });

            modelBuilder.Entity("MyVetAppointment.Data.Entities.Animal", b =>
                {
                    b.HasOne("MyVetAppointment.Data.Entities.Customer", null)
                        .WithMany("Animals")
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("MyVetAppointment.Data.Entities.Appointment", b =>
                {
                    b.HasOne("MyVetAppointment.Data.Entities.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MyVetAppointment.Data.Entities.VetDoctor", "VetDoctor")
                        .WithMany("Appointments")
                        .HasForeignKey("VetDoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("VetDoctor");
                });

            modelBuilder.Entity("MyVetAppointment.Data.Entities.Bill", b =>
                {
                    b.HasOne("MyVetAppointment.Data.Entities.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("MyVetAppointment.Data.Entities.CustomerVetDoctor", b =>
                {
                    b.HasOne("MyVetAppointment.Data.Entities.Customer", "Customer")
                        .WithMany("VetDoctors")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MyVetAppointment.Data.Entities.VetDoctor", "VetDoctor")
                        .WithMany("Customers")
                        .HasForeignKey("VetDoctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("VetDoctor");
                });

            modelBuilder.Entity("MyVetAppointment.Data.Entities.PrescriptionDrug", b =>
                {
                    b.HasOne("MyVetAppointment.Data.Entities.Bill", "Bill")
                        .WithMany("PrescriptionDrugs")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyVetAppointment.Data.Entities.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("Drug");
                });

            modelBuilder.Entity("MyVetAppointment.Data.Entities.Bill", b =>
                {
                    b.Navigation("PrescriptionDrugs");
                });

            modelBuilder.Entity("MyVetAppointment.Data.Entities.Customer", b =>
                {
                    b.Navigation("Animals");

                    b.Navigation("Appointments");

                    b.Navigation("VetDoctors");
                });

            modelBuilder.Entity("MyVetAppointment.Data.Entities.VetDoctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Customers");
                });
#pragma warning restore 612, 618
        }
    }
}
